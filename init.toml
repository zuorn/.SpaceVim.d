#=============================================================================
#=============================================================================
#                            spacevim 配置 
#                      快速打开配置文件快捷键：Spc f v d 
#=============================================================================
#=============================================================================

#============================= [选项] 配置 ===================================
[options]

    # 主题
    # colorscheme = "gruvbox"
    colorscheme = "one"
    colorscheme_bg = "dark"


    # 启用/禁用终端真色，在目前大多数终端下都是支持真色的，当然也有
    # 一小部分终端不支持真色，如果你的 SpaceVim 颜色看上去比较怪异
    # 可以禁用终端真色，将下面的值设为 false
    enable_guicolors = true

    # 状态栏分割符
    # statusline_separator = "fire"
    statusline_inactive_separator = "arrow"
    # buffer_index_type = 4
    enable_tabline_filetype_icon = true
    # enable_statusline_mode = false
#
#============================= 状态栏 配置 ===================================
    # options for statusline
    # 设置状态栏上分割符号形状，如果字体安装失败，可以将值设为 "nil" 以禁用分割符号，
    # 分割符包括以下几种 "arrow", "curve", "slant", "fire", "nil"，默认为箭头 "arrow"
    # 设置活动窗口状态栏上的分割符号形状
    statusline_separator = "fire"
    # 设置非活动窗口状态栏上的分割符号形状
    # statusline_iseparator = "curve"

    # 设置顶部标签列表序号类型，有以下五种类型，分别是 0 - 4
    buffer_index_type = 4
    # 0: 1 ➛ ➊
    # 1: 1 ➛ ➀
    # 2: 1 ➛ ⓵
    # 3: 1 ➛ ¹
    # 4: 1 ➛ 1

    # 是否在状态栏上显示当前模式，默认情况下，不显示 Normal/Insert 等
    enable_statusline_mode = true

    # 状态栏左端部分的构成
    # statusline_left_sections = ['winnr', 'filename', 'fileformat', 'version control info', 'search status']
    # 状态栏右端部分的构成
    # statusline_right_sections = ['minor mode lighters', 'cursorpos', 'percentage', 'input method',  'time']
    # 列表可以由以下一项或多项组成

    # 'winnr' 当前窗口编号
    # 'syntax checking'
    # 'filename' 文件名
    # 'fileformat' 文件格式
    # 'major mode'
    # 'minor mode lighters'
    # 'cursorpos' 光标位置
    # 'percentage' 百分比
    # 'date' 日期
    # 'time' 时间
    # 'whitespace' 打开或者保存文件时，如果第 n 行的行尾有空格则显示 trailing[n]，并不能实时显示出行尾有空格的行号。
    # 'battery status' 电池状态
    # 'input method' 输入法
    # 'search status' 搜索状态

    # 中文帮助文档
    vim_help_language = "cn"
    # 字体设置
    guifont = "Hack Nerd Font:h14"


# 函数
    # 函数 bootstrap_before 将在读取用户配置后执行，而函数 bootstrap_after 将在 VimEnter autocmd 之后执行。
    bootstrap_before = "myspacevim#before"
    bootstrap_before = "conf#before"
    bootstrap_after  = "myspacevim#after"



#============================= [模块] 配置 ================================================

# Enable autocomplete layer
[[layers]]
name = 'autocomplete'

# shell
[[layers]]
name = 'shell'
default_position = 'float'
default_height = 50

[[layers]]
  name = "colorscheme"

# chinese mode
[[layers]]
  name = "chinese"

# tmux
# Ctrl + hjkl 切换窗格
[[layers]]
  name = "tmux"

# toml 语法高亮
[[layers]]
  name = "lang#toml"

# # vim 语法高亮
# [[layers]]
  name = "lang#vim"

# markdown
# 浏览器实时预览： SPC l p
[[layers]]
  name = "lang#markdown"


# shell 语法检查
[[layers]]
  name = "lang#sh"

# dockerfile 语法高亮，如若需要语言服务器支持需要安装 ：npm install -g dockerfile-language-server-nodejs
[[layers]]
  name = "lang#dockerfile"


# git
[[layers]]
  name = "git"

[[layers]]
  name = "github"

# 这一模块为 SpaceVim 提供了通用的代码版本控制支持，该模块支持 Git、Mercurial、Bazaar、SVN 等等多种后台工具。 为 SpaceVim 提供如下特性：
#
# 在左侧栏显示代码改动标记
# 在状态栏显示 vcs 版本信息
[[layers]]
  name = "VersionControl"

# 该模块为 SpaceVim 提供了 Dash 集成。
# SPC D d	查询光标下单词
# SPC D D	在所有文档中查询光标单词
[[layers]]
  name = "tools#dash"


# musics_directory: 设置音乐存放文件夹
# mpv_interpreter: mpv 可执行命令路径
# loop_mode: 循环模式，默认是 random
# SPC m m l	模糊搜索音乐列表
# SPC m m n	下一首
# SPC m m s	停止播放

# [[layers]]
    # name = 'tools#mpv'
    # mpv_interpreter = 'D:\Program Files\mpv\mpv.exe'
    # musics_directory = 'F:\other\musics'
#
# 版本控制
# [[layers]]
#   name = "VersionControl"
#
# fzf - SpaceVim 内置的fzf
[[layers]]
  name = "fzf"


# SpaceVim ui 模块提供了一个 IDE-like 的界面，包括状态栏、文件树、语法数等等特性。

[[layers]]
  name = "ui"

# 这一模块用于在 SpaceVim 中直接运行单元测试。
[[layers]]
  name = "test"
#
#============================= python 开发环境 ================================================
# 快速运行: SPC l r

# ---->   交互式编程
# 启用后进程： SPC l s i
# 逐行发送： SPC l s l
# 选中区域发送： SPC l s s

#---->  安装 python 模块
[[layers]]
  name = "lang#python"

# ---->  语法检查：
# checkers 模块为 SpaceVim 提供了语法检查的功能，该模块默认已经载入。该模块默认使用 neomake 这一异步语法检查工具。对于 Python 的支持，是通过异步调用 flake8 命令，因此需安装，可通过 pip 命令来完成：
# pip install --user flake8

# python 代码格式化 需要安装依赖 yapf:
# pip install --user yapf
[[layers]]
  name = "format"


#---->   导入模块：
# 在编辑 Python 文件时，可以自动导入包、自动删除无用的包、排序格式化导包；需要安装 isort，可通过以下命令安装：
# pip install --user isort

# 调试
[[layers]]
   name = "debug"

# 模糊搜索 文件 - 函数列表 - 命令历史等
[[layers]]
  name = "unite"

#============================= 添加自定义插件 ================================================
#
# [[custom_plugins]]
# one_cmd 选项使得这个插件延迟加载。
# merged 选项用于设定是否合并该插件的文件夹，如果 merged 是 true，那么，这一插件内的文件将被合并到： ~/.cache/vimfiles/.cache/init.vim/ 或者 ~/.cache/vimfiles/.cache/vimrc/， 这依据当前使用的是 Neovim 还是 Vim。
# [[custom_plugins]]
    # repo = "neoclide/coc.nvim"
    # on_cmd = ["ColorHighlight", "ColorToggle"]
    # merged = false

# ranger 插件
# 使用说明：https://github.com/francoiscabrol/ranger.vim
    # repo = "francoiscabrol/ranger.vim"
    # on_cmd = ["ColorHighlight", "ColorToggle"]
    # merged = false


# Vimwiki 是 Vim 中的个人 Wiki —— 一组链接起来的、有独特语法高亮的文本文件。
# 使用方法：https://github.com/vimwiki/vimwiki/blob/master/README-cn.md
    # repo = "vimwiki/vimwiki"
    # on_cmd = ["ColorHighlight", "ColorToggle"]
    # merged = false
    #
# 表格 vim-table-mode
